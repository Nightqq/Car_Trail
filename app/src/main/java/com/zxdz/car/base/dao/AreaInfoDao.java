package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.AreaInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_INFO".
*/
public class AreaInfoDao extends AbstractDao<AreaInfo, Long> {

    public static final String TABLENAME = "AREA_INFO";

    /**
     * Properties of entity AreaInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Area_Id = new Property(1, int.class, "Area_Id", false, "AREA__ID");
        public final static Property Area_name = new Property(2, String.class, "Area_name", false, "AREA_NAME");
        public final static Property Area_police = new Property(3, String.class, "Area_police", false, "AREA_POLICE");
        public final static Property Area_range = new Property(4, String.class, "Area_range", false, "AREA_RANGE");
        public final static Property Area_card_police = new Property(5, boolean.class, "Area_card_police", false, "AREA_CARD_POLICE");
        public final static Property Area_card_dricer = new Property(6, boolean.class, "Area_card_dricer", false, "AREA_CARD_DRICER");
    }


    public AreaInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AreaInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA__ID\" INTEGER NOT NULL ," + // 1: Area_Id
                "\"AREA_NAME\" TEXT," + // 2: Area_name
                "\"AREA_POLICE\" TEXT," + // 3: Area_police
                "\"AREA_RANGE\" TEXT," + // 4: Area_range
                "\"AREA_CARD_POLICE\" INTEGER NOT NULL ," + // 5: Area_card_police
                "\"AREA_CARD_DRICER\" INTEGER NOT NULL );"); // 6: Area_card_dricer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArea_Id());
 
        String Area_name = entity.getArea_name();
        if (Area_name != null) {
            stmt.bindString(3, Area_name);
        }
 
        String Area_police = entity.getArea_police();
        if (Area_police != null) {
            stmt.bindString(4, Area_police);
        }
 
        String Area_range = entity.getArea_range();
        if (Area_range != null) {
            stmt.bindString(5, Area_range);
        }
        stmt.bindLong(6, entity.getArea_card_police() ? 1L: 0L);
        stmt.bindLong(7, entity.getArea_card_dricer() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getArea_Id());
 
        String Area_name = entity.getArea_name();
        if (Area_name != null) {
            stmt.bindString(3, Area_name);
        }
 
        String Area_police = entity.getArea_police();
        if (Area_police != null) {
            stmt.bindString(4, Area_police);
        }
 
        String Area_range = entity.getArea_range();
        if (Area_range != null) {
            stmt.bindString(5, Area_range);
        }
        stmt.bindLong(6, entity.getArea_card_police() ? 1L: 0L);
        stmt.bindLong(7, entity.getArea_card_dricer() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AreaInfo readEntity(Cursor cursor, int offset) {
        AreaInfo entity = new AreaInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Area_Id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Area_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Area_police
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Area_range
            cursor.getShort(offset + 5) != 0, // Area_card_police
            cursor.getShort(offset + 6) != 0 // Area_card_dricer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArea_Id(cursor.getInt(offset + 1));
        entity.setArea_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArea_police(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArea_range(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setArea_card_police(cursor.getShort(offset + 5) != 0);
        entity.setArea_card_dricer(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AreaInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AreaInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AreaInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
