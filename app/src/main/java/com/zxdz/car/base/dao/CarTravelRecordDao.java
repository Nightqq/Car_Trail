package com.zxdz.car.base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zxdz.car.main.model.domain.CarTravelRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR_TRAVEL_RECORD".
*/
public class CarTravelRecordDao extends AbstractDao<CarTravelRecord, Long> {

    public static final String TABLENAME = "CAR_TRAVEL_RECORD";

    /**
     * Properties of entity CarTravelRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ZdjId = new Property(1, int.class, "zdjId", false, "ZDJ_ID");
        public final static Property LsId = new Property(2, int.class, "lsId", false, "LS_ID");
        public final static Property QyId = new Property(3, int.class, "qyId", false, "QY_ID");
        public final static Property CurrentDate = new Property(4, java.util.Date.class, "currentDate", false, "CURRENT_DATE");
        public final static Property State = new Property(5, int.class, "state", false, "STATE");
        public final static Property AdminCardNumber = new Property(6, String.class, "adminCardNumber", false, "ADMIN_CARD_NUMBER");
        public final static Property AdminSwipeTime = new Property(7, java.util.Date.class, "adminSwipeTime", false, "ADMIN_SWIPE_TIME");
        public final static Property UsePoliceCardNumber = new Property(8, String.class, "usePoliceCardNumber", false, "USE_POLICE_CARD_NUMBER");
        public final static Property UsePoliceSwipeTime = new Property(9, java.util.Date.class, "usePoliceSwipeTime", false, "USE_POLICE_SWIPE_TIME");
        public final static Property DriverCardNumber = new Property(10, String.class, "driverCardNumber", false, "DRIVER_CARD_NUMBER");
        public final static Property DriverSwipeTime = new Property(11, java.util.Date.class, "driverSwipeTime", false, "DRIVER_SWIPE_TIME");
        public final static Property CarNumber = new Property(12, String.class, "carNumber", false, "CAR_NUMBER");
        public final static Property CarType = new Property(13, String.class, "carType", false, "CAR_TYPE");
        public final static Property DriverName = new Property(14, String.class, "driverName", false, "DRIVER_NAME");
        public final static Property DriverSex = new Property(15, String.class, "driverSex", false, "DRIVER_SEX");
        public final static Property EntryReasons = new Property(16, String.class, "entryReasons", false, "ENTRY_REASONS");
        public final static Property InstallPoliceCardNumber = new Property(17, String.class, "installPoliceCardNumber", false, "INSTALL_POLICE_CARD_NUMBER");
        public final static Property InstallPoliceSwipeTime = new Property(18, java.util.Date.class, "installPoliceSwipeTime", false, "INSTALL_POLICE_SWIPE_TIME");
        public final static Property LockPoliceCardNumber = new Property(19, String.class, "lockPoliceCardNumber", false, "LOCK_POLICE_CARD_NUMBER");
        public final static Property LockPoliceSwipeTime = new Property(20, java.util.Date.class, "lockPoliceSwipeTime", false, "LOCK_POLICE_SWIPE_TIME");
        public final static Property OpenPoliceCardNumber = new Property(21, String.class, "openPoliceCardNumber", false, "OPEN_POLICE_CARD_NUMBER");
        public final static Property OpenPoliceSwipeTime = new Property(22, java.util.Date.class, "openPoliceSwipeTime", false, "OPEN_POLICE_SWIPE_TIME");
        public final static Property ReturnPoliceCardNumber = new Property(23, String.class, "returnPoliceCardNumber", false, "RETURN_POLICE_CARD_NUMBER");
        public final static Property ReturnPoliceSwipeTime = new Property(24, java.util.Date.class, "returnPoliceSwipeTime", false, "RETURN_POLICE_SWIPE_TIME");
        public final static Property DateState = new Property(25, int.class, "dateState", false, "DATE_STATE");
        public final static Property Remark = new Property(26, String.class, "remark", false, "REMARK");
    }


    public CarTravelRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CarTravelRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR_TRAVEL_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ZDJ_ID\" INTEGER NOT NULL ," + // 1: zdjId
                "\"LS_ID\" INTEGER NOT NULL ," + // 2: lsId
                "\"QY_ID\" INTEGER NOT NULL ," + // 3: qyId
                "\"CURRENT_DATE\" INTEGER," + // 4: currentDate
                "\"STATE\" INTEGER NOT NULL ," + // 5: state
                "\"ADMIN_CARD_NUMBER\" TEXT," + // 6: adminCardNumber
                "\"ADMIN_SWIPE_TIME\" INTEGER," + // 7: adminSwipeTime
                "\"USE_POLICE_CARD_NUMBER\" TEXT," + // 8: usePoliceCardNumber
                "\"USE_POLICE_SWIPE_TIME\" INTEGER," + // 9: usePoliceSwipeTime
                "\"DRIVER_CARD_NUMBER\" TEXT," + // 10: driverCardNumber
                "\"DRIVER_SWIPE_TIME\" INTEGER," + // 11: driverSwipeTime
                "\"CAR_NUMBER\" TEXT," + // 12: carNumber
                "\"CAR_TYPE\" TEXT," + // 13: carType
                "\"DRIVER_NAME\" TEXT," + // 14: driverName
                "\"DRIVER_SEX\" TEXT," + // 15: driverSex
                "\"ENTRY_REASONS\" TEXT," + // 16: entryReasons
                "\"INSTALL_POLICE_CARD_NUMBER\" TEXT," + // 17: installPoliceCardNumber
                "\"INSTALL_POLICE_SWIPE_TIME\" INTEGER," + // 18: installPoliceSwipeTime
                "\"LOCK_POLICE_CARD_NUMBER\" TEXT," + // 19: lockPoliceCardNumber
                "\"LOCK_POLICE_SWIPE_TIME\" INTEGER," + // 20: lockPoliceSwipeTime
                "\"OPEN_POLICE_CARD_NUMBER\" TEXT," + // 21: openPoliceCardNumber
                "\"OPEN_POLICE_SWIPE_TIME\" INTEGER," + // 22: openPoliceSwipeTime
                "\"RETURN_POLICE_CARD_NUMBER\" TEXT," + // 23: returnPoliceCardNumber
                "\"RETURN_POLICE_SWIPE_TIME\" INTEGER," + // 24: returnPoliceSwipeTime
                "\"DATE_STATE\" INTEGER NOT NULL ," + // 25: dateState
                "\"REMARK\" TEXT);"); // 26: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR_TRAVEL_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CarTravelRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getZdjId());
        stmt.bindLong(3, entity.getLsId());
        stmt.bindLong(4, entity.getQyId());
 
        java.util.Date currentDate = entity.getCurrentDate();
        if (currentDate != null) {
            stmt.bindLong(5, currentDate.getTime());
        }
        stmt.bindLong(6, entity.getState());
 
        String adminCardNumber = entity.getAdminCardNumber();
        if (adminCardNumber != null) {
            stmt.bindString(7, adminCardNumber);
        }
 
        java.util.Date adminSwipeTime = entity.getAdminSwipeTime();
        if (adminSwipeTime != null) {
            stmt.bindLong(8, adminSwipeTime.getTime());
        }
 
        String usePoliceCardNumber = entity.getUsePoliceCardNumber();
        if (usePoliceCardNumber != null) {
            stmt.bindString(9, usePoliceCardNumber);
        }
 
        java.util.Date usePoliceSwipeTime = entity.getUsePoliceSwipeTime();
        if (usePoliceSwipeTime != null) {
            stmt.bindLong(10, usePoliceSwipeTime.getTime());
        }
 
        String driverCardNumber = entity.getDriverCardNumber();
        if (driverCardNumber != null) {
            stmt.bindString(11, driverCardNumber);
        }
 
        java.util.Date driverSwipeTime = entity.getDriverSwipeTime();
        if (driverSwipeTime != null) {
            stmt.bindLong(12, driverSwipeTime.getTime());
        }
 
        String carNumber = entity.getCarNumber();
        if (carNumber != null) {
            stmt.bindString(13, carNumber);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(14, carType);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(15, driverName);
        }
 
        String driverSex = entity.getDriverSex();
        if (driverSex != null) {
            stmt.bindString(16, driverSex);
        }
 
        String entryReasons = entity.getEntryReasons();
        if (entryReasons != null) {
            stmt.bindString(17, entryReasons);
        }
 
        String installPoliceCardNumber = entity.getInstallPoliceCardNumber();
        if (installPoliceCardNumber != null) {
            stmt.bindString(18, installPoliceCardNumber);
        }
 
        java.util.Date installPoliceSwipeTime = entity.getInstallPoliceSwipeTime();
        if (installPoliceSwipeTime != null) {
            stmt.bindLong(19, installPoliceSwipeTime.getTime());
        }
 
        String lockPoliceCardNumber = entity.getLockPoliceCardNumber();
        if (lockPoliceCardNumber != null) {
            stmt.bindString(20, lockPoliceCardNumber);
        }
 
        java.util.Date lockPoliceSwipeTime = entity.getLockPoliceSwipeTime();
        if (lockPoliceSwipeTime != null) {
            stmt.bindLong(21, lockPoliceSwipeTime.getTime());
        }
 
        String openPoliceCardNumber = entity.getOpenPoliceCardNumber();
        if (openPoliceCardNumber != null) {
            stmt.bindString(22, openPoliceCardNumber);
        }
 
        java.util.Date openPoliceSwipeTime = entity.getOpenPoliceSwipeTime();
        if (openPoliceSwipeTime != null) {
            stmt.bindLong(23, openPoliceSwipeTime.getTime());
        }
 
        String returnPoliceCardNumber = entity.getReturnPoliceCardNumber();
        if (returnPoliceCardNumber != null) {
            stmt.bindString(24, returnPoliceCardNumber);
        }
 
        java.util.Date returnPoliceSwipeTime = entity.getReturnPoliceSwipeTime();
        if (returnPoliceSwipeTime != null) {
            stmt.bindLong(25, returnPoliceSwipeTime.getTime());
        }
        stmt.bindLong(26, entity.getDateState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(27, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CarTravelRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getZdjId());
        stmt.bindLong(3, entity.getLsId());
        stmt.bindLong(4, entity.getQyId());
 
        java.util.Date currentDate = entity.getCurrentDate();
        if (currentDate != null) {
            stmt.bindLong(5, currentDate.getTime());
        }
        stmt.bindLong(6, entity.getState());
 
        String adminCardNumber = entity.getAdminCardNumber();
        if (adminCardNumber != null) {
            stmt.bindString(7, adminCardNumber);
        }
 
        java.util.Date adminSwipeTime = entity.getAdminSwipeTime();
        if (adminSwipeTime != null) {
            stmt.bindLong(8, adminSwipeTime.getTime());
        }
 
        String usePoliceCardNumber = entity.getUsePoliceCardNumber();
        if (usePoliceCardNumber != null) {
            stmt.bindString(9, usePoliceCardNumber);
        }
 
        java.util.Date usePoliceSwipeTime = entity.getUsePoliceSwipeTime();
        if (usePoliceSwipeTime != null) {
            stmt.bindLong(10, usePoliceSwipeTime.getTime());
        }
 
        String driverCardNumber = entity.getDriverCardNumber();
        if (driverCardNumber != null) {
            stmt.bindString(11, driverCardNumber);
        }
 
        java.util.Date driverSwipeTime = entity.getDriverSwipeTime();
        if (driverSwipeTime != null) {
            stmt.bindLong(12, driverSwipeTime.getTime());
        }
 
        String carNumber = entity.getCarNumber();
        if (carNumber != null) {
            stmt.bindString(13, carNumber);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(14, carType);
        }
 
        String driverName = entity.getDriverName();
        if (driverName != null) {
            stmt.bindString(15, driverName);
        }
 
        String driverSex = entity.getDriverSex();
        if (driverSex != null) {
            stmt.bindString(16, driverSex);
        }
 
        String entryReasons = entity.getEntryReasons();
        if (entryReasons != null) {
            stmt.bindString(17, entryReasons);
        }
 
        String installPoliceCardNumber = entity.getInstallPoliceCardNumber();
        if (installPoliceCardNumber != null) {
            stmt.bindString(18, installPoliceCardNumber);
        }
 
        java.util.Date installPoliceSwipeTime = entity.getInstallPoliceSwipeTime();
        if (installPoliceSwipeTime != null) {
            stmt.bindLong(19, installPoliceSwipeTime.getTime());
        }
 
        String lockPoliceCardNumber = entity.getLockPoliceCardNumber();
        if (lockPoliceCardNumber != null) {
            stmt.bindString(20, lockPoliceCardNumber);
        }
 
        java.util.Date lockPoliceSwipeTime = entity.getLockPoliceSwipeTime();
        if (lockPoliceSwipeTime != null) {
            stmt.bindLong(21, lockPoliceSwipeTime.getTime());
        }
 
        String openPoliceCardNumber = entity.getOpenPoliceCardNumber();
        if (openPoliceCardNumber != null) {
            stmt.bindString(22, openPoliceCardNumber);
        }
 
        java.util.Date openPoliceSwipeTime = entity.getOpenPoliceSwipeTime();
        if (openPoliceSwipeTime != null) {
            stmt.bindLong(23, openPoliceSwipeTime.getTime());
        }
 
        String returnPoliceCardNumber = entity.getReturnPoliceCardNumber();
        if (returnPoliceCardNumber != null) {
            stmt.bindString(24, returnPoliceCardNumber);
        }
 
        java.util.Date returnPoliceSwipeTime = entity.getReturnPoliceSwipeTime();
        if (returnPoliceSwipeTime != null) {
            stmt.bindLong(25, returnPoliceSwipeTime.getTime());
        }
        stmt.bindLong(26, entity.getDateState());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(27, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CarTravelRecord readEntity(Cursor cursor, int offset) {
        CarTravelRecord entity = new CarTravelRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // zdjId
            cursor.getInt(offset + 2), // lsId
            cursor.getInt(offset + 3), // qyId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // currentDate
            cursor.getInt(offset + 5), // state
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // adminCardNumber
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // adminSwipeTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // usePoliceCardNumber
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // usePoliceSwipeTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // driverCardNumber
            cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)), // driverSwipeTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // carNumber
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // carType
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // driverName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // driverSex
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // entryReasons
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // installPoliceCardNumber
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // installPoliceSwipeTime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lockPoliceCardNumber
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // lockPoliceSwipeTime
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // openPoliceCardNumber
            cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)), // openPoliceSwipeTime
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // returnPoliceCardNumber
            cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)), // returnPoliceSwipeTime
            cursor.getInt(offset + 25), // dateState
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CarTravelRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setZdjId(cursor.getInt(offset + 1));
        entity.setLsId(cursor.getInt(offset + 2));
        entity.setQyId(cursor.getInt(offset + 3));
        entity.setCurrentDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setState(cursor.getInt(offset + 5));
        entity.setAdminCardNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdminSwipeTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUsePoliceCardNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUsePoliceSwipeTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setDriverCardNumber(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDriverSwipeTime(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setCarNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCarType(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDriverName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDriverSex(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setEntryReasons(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInstallPoliceCardNumber(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInstallPoliceSwipeTime(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setLockPoliceCardNumber(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLockPoliceSwipeTime(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setOpenPoliceCardNumber(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOpenPoliceSwipeTime(cursor.isNull(offset + 22) ? null : new java.util.Date(cursor.getLong(offset + 22)));
        entity.setReturnPoliceCardNumber(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReturnPoliceSwipeTime(cursor.isNull(offset + 24) ? null : new java.util.Date(cursor.getLong(offset + 24)));
        entity.setDateState(cursor.getInt(offset + 25));
        entity.setRemark(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CarTravelRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CarTravelRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CarTravelRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
